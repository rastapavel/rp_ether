# RP

# array to hold per account id message sender key, single transaction limit, and balance
data acct_limits[](sender, single_limit, balance)

# Initialize accounts with limits and starting balance
def init_limit(id, limit, balance):
    self.acct_limits[id].sender = msg.sender
    self.acct_limits[id].single_limit = limit
    self.acct_limits[id].balance = balance
    return(1)

# Query acct_limits
def ask_limit(id):
    return(self.acct_limits[id].single_limit)

def ask_balance(id):
    return(self.acct_limits[id].balance)

def ask_sender(id):
    return(self.acct_limits[id].sender)

# Transfer. Actually, just deduct
def transfer(id, amt):
    if amt > self.acct_limits[id].single_limit & self.acct_limits[id].balance - amt >= 0:
        # Could also flag manager that illegal transfer attempted and close account id
        return(-1)
    else:
        self.acct_limits[id].balance = self.acct_limits[id].balance - amt
        return(self.acct_limits[id].balance) # Return remaining balance